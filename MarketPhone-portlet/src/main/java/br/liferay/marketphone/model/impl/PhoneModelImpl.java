package br.liferay.marketphone.model.impl;

import br.liferay.marketphone.model.Phone;
import br.liferay.marketphone.model.PhoneModel;
import br.liferay.marketphone.model.PhoneSoap;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the Phone service. Represents a row in the &quot;MARKETPHONE_PHONE&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link br.liferay.marketphone.model.PhoneModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PhoneImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PhoneImpl
 * @see br.liferay.marketphone.model.Phone
 * @see br.liferay.marketphone.model.PhoneModel
 * @generated
 */
@JSON(strict = true)
public class PhoneModelImpl extends BaseModelImpl<Phone> implements PhoneModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a Phone model instance should use the {@link br.liferay.marketphone.model.Phone} interface instead.
     */
    public static final String TABLE_NAME = "MARKETPHONE_PHONE";
    public static final Object[][] TABLE_COLUMNS = {
            { "IDPHONE", Types.BIGINT },
            { "NAME", Types.VARCHAR },
            { "BRAND", Types.VARCHAR },
            { "DESCRIPTION", Types.VARCHAR },
            { "RELEASEDATE", Types.TIMESTAMP },
            { "PRICE", Types.DOUBLE },
            { "IMGURL", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table MARKETPHONE_PHONE (IDPHONE LONG not null primary key,NAME STRING null,BRAND VARCHAR(75) null,DESCRIPTION STRING null,RELEASEDATE DATE null,PRICE DOUBLE,IMGURL VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table MARKETPHONE_PHONE";
    public static final String ORDER_BY_JPQL = " ORDER BY phone.name ASC";
    public static final String ORDER_BY_SQL = " ORDER BY MARKETPHONE_PHONE.NAME ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.br.liferay.marketphone.model.Phone"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.br.liferay.marketphone.model.Phone"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.br.liferay.marketphone.model.Phone"),
            true);
    public static long NAME_COLUMN_BITMASK = 1L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.br.liferay.marketphone.model.Phone"));
    private static ClassLoader _classLoader = Phone.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Phone.class };
    private long _idPhone;
    private String _name;
    private String _nameCurrentLanguageId;
    private String _originalName;
    private String _brand;
    private String _description;
    private String _descriptionCurrentLanguageId;
    private Date _releaseDate;
    private double _price;
    private String _imgUrl;
    private long _columnBitmask;
    private Phone _escapedModel;

    public PhoneModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Phone toModel(PhoneSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Phone model = new PhoneImpl();

        model.setIdPhone(soapModel.getIdPhone());
        model.setName(soapModel.getName());
        model.setBrand(soapModel.getBrand());
        model.setDescription(soapModel.getDescription());
        model.setReleaseDate(soapModel.getReleaseDate());
        model.setPrice(soapModel.getPrice());
        model.setImgUrl(soapModel.getImgUrl());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Phone> toModels(PhoneSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Phone> models = new ArrayList<Phone>(soapModels.length);

        for (PhoneSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _idPhone;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setIdPhone(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _idPhone;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Phone.class;
    }

    @Override
    public String getModelClassName() {
        return Phone.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("idPhone", getIdPhone());
        attributes.put("name", getName());
        attributes.put("brand", getBrand());
        attributes.put("description", getDescription());
        attributes.put("releaseDate", getReleaseDate());
        attributes.put("price", getPrice());
        attributes.put("imgUrl", getImgUrl());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long idPhone = (Long) attributes.get("idPhone");

        if (idPhone != null) {
            setIdPhone(idPhone);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        String brand = (String) attributes.get("brand");

        if (brand != null) {
            setBrand(brand);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }

        Date releaseDate = (Date) attributes.get("releaseDate");

        if (releaseDate != null) {
            setReleaseDate(releaseDate);
        }

        Double price = (Double) attributes.get("price");

        if (price != null) {
            setPrice(price);
        }

        String imgUrl = (String) attributes.get("imgUrl");

        if (imgUrl != null) {
            setImgUrl(imgUrl);
        }
    }

    @JSON
    @Override
    public long getIdPhone() {
        return _idPhone;
    }

    @Override
    public void setIdPhone(long idPhone) {
        _idPhone = idPhone;
    }

    @JSON
    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public String getName(Locale locale) {
        String languageId = LocaleUtil.toLanguageId(locale);

        return getName(languageId);
    }

    @Override
    public String getName(Locale locale, boolean useDefault) {
        String languageId = LocaleUtil.toLanguageId(locale);

        return getName(languageId, useDefault);
    }

    @Override
    public String getName(String languageId) {
        return LocalizationUtil.getLocalization(getName(), languageId);
    }

    @Override
    public String getName(String languageId, boolean useDefault) {
        return LocalizationUtil.getLocalization(getName(), languageId,
            useDefault);
    }

    @Override
    public String getNameCurrentLanguageId() {
        return _nameCurrentLanguageId;
    }

    @JSON
    @Override
    public String getNameCurrentValue() {
        Locale locale = getLocale(_nameCurrentLanguageId);

        return getName(locale);
    }

    @Override
    public Map<Locale, String> getNameMap() {
        return LocalizationUtil.getLocalizationMap(getName());
    }

    @Override
    public void setName(String name) {
        _columnBitmask = -1L;

        if (_originalName == null) {
            _originalName = _name;
        }

        _name = name;
    }

    @Override
    public void setName(String name, Locale locale) {
        setName(name, locale, LocaleUtil.getDefault());
    }

    @Override
    public void setName(String name, Locale locale, Locale defaultLocale) {
        String languageId = LocaleUtil.toLanguageId(locale);
        String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

        if (Validator.isNotNull(name)) {
            setName(LocalizationUtil.updateLocalization(getName(), "Name",
                    name, languageId, defaultLanguageId));
        } else {
            setName(LocalizationUtil.removeLocalization(getName(), "Name",
                    languageId));
        }
    }

    @Override
    public void setNameCurrentLanguageId(String languageId) {
        _nameCurrentLanguageId = languageId;
    }

    @Override
    public void setNameMap(Map<Locale, String> nameMap) {
        setNameMap(nameMap, LocaleUtil.getDefault());
    }

    @Override
    public void setNameMap(Map<Locale, String> nameMap, Locale defaultLocale) {
        if (nameMap == null) {
            return;
        }

        setName(LocalizationUtil.updateLocalization(nameMap, getName(), "Name",
                LocaleUtil.toLanguageId(defaultLocale)));
    }

    public String getOriginalName() {
        return GetterUtil.getString(_originalName);
    }

    @JSON
    @Override
    public String getBrand() {
        if (_brand == null) {
            return StringPool.BLANK;
        } else {
            return _brand;
        }
    }

    @Override
    public void setBrand(String brand) {
        _brand = brand;
    }

    @JSON
    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public String getDescription(Locale locale) {
        String languageId = LocaleUtil.toLanguageId(locale);

        return getDescription(languageId);
    }

    @Override
    public String getDescription(Locale locale, boolean useDefault) {
        String languageId = LocaleUtil.toLanguageId(locale);

        return getDescription(languageId, useDefault);
    }

    @Override
    public String getDescription(String languageId) {
        return LocalizationUtil.getLocalization(getDescription(), languageId);
    }

    @Override
    public String getDescription(String languageId, boolean useDefault) {
        return LocalizationUtil.getLocalization(getDescription(), languageId,
            useDefault);
    }

    @Override
    public String getDescriptionCurrentLanguageId() {
        return _descriptionCurrentLanguageId;
    }

    @JSON
    @Override
    public String getDescriptionCurrentValue() {
        Locale locale = getLocale(_descriptionCurrentLanguageId);

        return getDescription(locale);
    }

    @Override
    public Map<Locale, String> getDescriptionMap() {
        return LocalizationUtil.getLocalizationMap(getDescription());
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    @Override
    public void setDescription(String description, Locale locale) {
        setDescription(description, locale, LocaleUtil.getDefault());
    }

    @Override
    public void setDescription(String description, Locale locale,
        Locale defaultLocale) {
        String languageId = LocaleUtil.toLanguageId(locale);
        String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

        if (Validator.isNotNull(description)) {
            setDescription(LocalizationUtil.updateLocalization(
                    getDescription(), "Description", description, languageId,
                    defaultLanguageId));
        } else {
            setDescription(LocalizationUtil.removeLocalization(
                    getDescription(), "Description", languageId));
        }
    }

    @Override
    public void setDescriptionCurrentLanguageId(String languageId) {
        _descriptionCurrentLanguageId = languageId;
    }

    @Override
    public void setDescriptionMap(Map<Locale, String> descriptionMap) {
        setDescriptionMap(descriptionMap, LocaleUtil.getDefault());
    }

    @Override
    public void setDescriptionMap(Map<Locale, String> descriptionMap,
        Locale defaultLocale) {
        if (descriptionMap == null) {
            return;
        }

        setDescription(LocalizationUtil.updateLocalization(descriptionMap,
                getDescription(), "Description",
                LocaleUtil.toLanguageId(defaultLocale)));
    }

    @JSON
    @Override
    public Date getReleaseDate() {
        return _releaseDate;
    }

    @Override
    public void setReleaseDate(Date releaseDate) {
        _releaseDate = releaseDate;
    }

    @JSON
    @Override
    public double getPrice() {
        return _price;
    }

    @Override
    public void setPrice(double price) {
        _price = price;
    }

    @JSON
    @Override
    public String getImgUrl() {
        if (_imgUrl == null) {
            return StringPool.BLANK;
        } else {
            return _imgUrl;
        }
    }

    @Override
    public void setImgUrl(String imgUrl) {
        _imgUrl = imgUrl;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Phone.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public String[] getAvailableLanguageIds() {
        Set<String> availableLanguageIds = new TreeSet<String>();

        Map<Locale, String> nameMap = getNameMap();

        for (Map.Entry<Locale, String> entry : nameMap.entrySet()) {
            Locale locale = entry.getKey();
            String value = entry.getValue();

            if (Validator.isNotNull(value)) {
                availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
            }
        }

        Map<Locale, String> descriptionMap = getDescriptionMap();

        for (Map.Entry<Locale, String> entry : descriptionMap.entrySet()) {
            Locale locale = entry.getKey();
            String value = entry.getValue();

            if (Validator.isNotNull(value)) {
                availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
            }
        }

        return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
    }

    @Override
    public String getDefaultLanguageId() {
        String xml = getName();

        if (xml == null) {
            return StringPool.BLANK;
        }

        return LocalizationUtil.getDefaultLanguageId(xml);
    }

    @Override
    public void prepareLocalizedFieldsForImport() throws LocaleException {
        prepareLocalizedFieldsForImport(null);
    }

    @Override
    @SuppressWarnings("unused")
    public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
        throws LocaleException {
        Locale defaultLocale = LocaleUtil.getDefault();

        String modelDefaultLanguageId = getDefaultLanguageId();

        String name = getName(defaultLocale);

        if (Validator.isNull(name)) {
            setName(getName(modelDefaultLanguageId), defaultLocale);
        } else {
            setName(getName(defaultLocale), defaultLocale, defaultLocale);
        }

        String description = getDescription(defaultLocale);

        if (Validator.isNull(description)) {
            setDescription(getDescription(modelDefaultLanguageId), defaultLocale);
        } else {
            setDescription(getDescription(defaultLocale), defaultLocale,
                defaultLocale);
        }
    }

    @Override
    public Phone toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Phone) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        PhoneImpl phoneImpl = new PhoneImpl();

        phoneImpl.setIdPhone(getIdPhone());
        phoneImpl.setName(getName());
        phoneImpl.setBrand(getBrand());
        phoneImpl.setDescription(getDescription());
        phoneImpl.setReleaseDate(getReleaseDate());
        phoneImpl.setPrice(getPrice());
        phoneImpl.setImgUrl(getImgUrl());

        phoneImpl.resetOriginalValues();

        return phoneImpl;
    }

    @Override
    public int compareTo(Phone phone) {
        int value = 0;

        value = getName().compareTo(phone.getName());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Phone)) {
            return false;
        }

        Phone phone = (Phone) obj;

        long primaryKey = phone.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        PhoneModelImpl phoneModelImpl = this;

        phoneModelImpl._originalName = phoneModelImpl._name;

        phoneModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Phone> toCacheModel() {
        PhoneCacheModel phoneCacheModel = new PhoneCacheModel();

        phoneCacheModel.idPhone = getIdPhone();

        phoneCacheModel.name = getName();

        String name = phoneCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            phoneCacheModel.name = null;
        }

        phoneCacheModel.brand = getBrand();

        String brand = phoneCacheModel.brand;

        if ((brand != null) && (brand.length() == 0)) {
            phoneCacheModel.brand = null;
        }

        phoneCacheModel.description = getDescription();

        String description = phoneCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            phoneCacheModel.description = null;
        }

        Date releaseDate = getReleaseDate();

        if (releaseDate != null) {
            phoneCacheModel.releaseDate = releaseDate.getTime();
        } else {
            phoneCacheModel.releaseDate = Long.MIN_VALUE;
        }

        phoneCacheModel.price = getPrice();

        phoneCacheModel.imgUrl = getImgUrl();

        String imgUrl = phoneCacheModel.imgUrl;

        if ((imgUrl != null) && (imgUrl.length() == 0)) {
            phoneCacheModel.imgUrl = null;
        }

        return phoneCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(15);

        sb.append("{idPhone=");
        sb.append(getIdPhone());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", brand=");
        sb.append(getBrand());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append(", releaseDate=");
        sb.append(getReleaseDate());
        sb.append(", price=");
        sb.append(getPrice());
        sb.append(", imgUrl=");
        sb.append(getImgUrl());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(25);

        sb.append("<model><model-name>");
        sb.append("br.liferay.marketphone.model.Phone");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>idPhone</column-name><column-value><![CDATA[");
        sb.append(getIdPhone());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>brand</column-name><column-value><![CDATA[");
        sb.append(getBrand());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>releaseDate</column-name><column-value><![CDATA[");
        sb.append(getReleaseDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>price</column-name><column-value><![CDATA[");
        sb.append(getPrice());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>imgUrl</column-name><column-value><![CDATA[");
        sb.append(getImgUrl());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}

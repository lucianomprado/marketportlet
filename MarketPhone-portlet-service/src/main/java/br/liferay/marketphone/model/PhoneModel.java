package br.liferay.marketphone.model;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the Phone service. Represents a row in the &quot;MARKETPHONE_PHONE&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link br.liferay.marketphone.model.impl.PhoneModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link br.liferay.marketphone.model.impl.PhoneImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see Phone
 * @see br.liferay.marketphone.model.impl.PhoneImpl
 * @see br.liferay.marketphone.model.impl.PhoneModelImpl
 * @generated
 */
public interface PhoneModel extends BaseModel<Phone> {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this interface directly. All methods that expect a Phone model instance should use the {@link Phone} interface instead.
     */

    /**
     * Returns the primary key of this Phone.
     *
     * @return the primary key of this Phone
     */
    public long getPrimaryKey();

    /**
     * Sets the primary key of this Phone.
     *
     * @param primaryKey the primary key of this Phone
     */
    public void setPrimaryKey(long primaryKey);

    /**
     * Returns the id phone of this Phone.
     *
     * @return the id phone of this Phone
     */
    public long getIdPhone();

    /**
     * Sets the id phone of this Phone.
     *
     * @param idPhone the id phone of this Phone
     */
    public void setIdPhone(long idPhone);

    /**
     * Returns the name of this Phone.
     *
     * @return the name of this Phone
     */
    public String getName();

    /**
     * Returns the localized name of this Phone in the language. Uses the default language if no localization exists for the requested language.
     *
     * @param locale the locale of the language
     * @return the localized name of this Phone
     */
    @AutoEscape
    public String getName(Locale locale);

    /**
     * Returns the localized name of this Phone in the language, optionally using the default language if no localization exists for the requested language.
     *
     * @param locale the local of the language
     * @param useDefault whether to use the default language if no localization exists for the requested language
     * @return the localized name of this Phone. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
     */
    @AutoEscape
    public String getName(Locale locale, boolean useDefault);

    /**
     * Returns the localized name of this Phone in the language. Uses the default language if no localization exists for the requested language.
     *
     * @param languageId the ID of the language
     * @return the localized name of this Phone
     */
    @AutoEscape
    public String getName(String languageId);

    /**
     * Returns the localized name of this Phone in the language, optionally using the default language if no localization exists for the requested language.
     *
     * @param languageId the ID of the language
     * @param useDefault whether to use the default language if no localization exists for the requested language
     * @return the localized name of this Phone
     */
    @AutoEscape
    public String getName(String languageId, boolean useDefault);

    @AutoEscape
    public String getNameCurrentLanguageId();

    @AutoEscape
    public String getNameCurrentValue();

    /**
     * Returns a map of the locales and localized names of this Phone.
     *
     * @return the locales and localized names of this Phone
     */
    public Map<Locale, String> getNameMap();

    /**
     * Sets the name of this Phone.
     *
     * @param name the name of this Phone
     */
    public void setName(String name);

    /**
     * Sets the localized name of this Phone in the language.
     *
     * @param name the localized name of this Phone
     * @param locale the locale of the language
     */
    public void setName(String name, Locale locale);

    /**
     * Sets the localized name of this Phone in the language, and sets the default locale.
     *
     * @param name the localized name of this Phone
     * @param locale the locale of the language
     * @param defaultLocale the default locale
     */
    public void setName(String name, Locale locale, Locale defaultLocale);

    public void setNameCurrentLanguageId(String languageId);

    /**
     * Sets the localized names of this Phone from the map of locales and localized names.
     *
     * @param nameMap the locales and localized names of this Phone
     */
    public void setNameMap(Map<Locale, String> nameMap);

    /**
     * Sets the localized names of this Phone from the map of locales and localized names, and sets the default locale.
     *
     * @param nameMap the locales and localized names of this Phone
     * @param defaultLocale the default locale
     */
    public void setNameMap(Map<Locale, String> nameMap, Locale defaultLocale);

    /**
     * Returns the brand of this Phone.
     *
     * @return the brand of this Phone
     */
    @AutoEscape
    public String getBrand();

    /**
     * Sets the brand of this Phone.
     *
     * @param brand the brand of this Phone
     */
    public void setBrand(String brand);

    /**
     * Returns the description of this Phone.
     *
     * @return the description of this Phone
     */
    public String getDescription();

    /**
     * Returns the localized description of this Phone in the language. Uses the default language if no localization exists for the requested language.
     *
     * @param locale the locale of the language
     * @return the localized description of this Phone
     */
    @AutoEscape
    public String getDescription(Locale locale);

    /**
     * Returns the localized description of this Phone in the language, optionally using the default language if no localization exists for the requested language.
     *
     * @param locale the local of the language
     * @param useDefault whether to use the default language if no localization exists for the requested language
     * @return the localized description of this Phone. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
     */
    @AutoEscape
    public String getDescription(Locale locale, boolean useDefault);

    /**
     * Returns the localized description of this Phone in the language. Uses the default language if no localization exists for the requested language.
     *
     * @param languageId the ID of the language
     * @return the localized description of this Phone
     */
    @AutoEscape
    public String getDescription(String languageId);

    /**
     * Returns the localized description of this Phone in the language, optionally using the default language if no localization exists for the requested language.
     *
     * @param languageId the ID of the language
     * @param useDefault whether to use the default language if no localization exists for the requested language
     * @return the localized description of this Phone
     */
    @AutoEscape
    public String getDescription(String languageId, boolean useDefault);

    @AutoEscape
    public String getDescriptionCurrentLanguageId();

    @AutoEscape
    public String getDescriptionCurrentValue();

    /**
     * Returns a map of the locales and localized descriptions of this Phone.
     *
     * @return the locales and localized descriptions of this Phone
     */
    public Map<Locale, String> getDescriptionMap();

    /**
     * Sets the description of this Phone.
     *
     * @param description the description of this Phone
     */
    public void setDescription(String description);

    /**
     * Sets the localized description of this Phone in the language.
     *
     * @param description the localized description of this Phone
     * @param locale the locale of the language
     */
    public void setDescription(String description, Locale locale);

    /**
     * Sets the localized description of this Phone in the language, and sets the default locale.
     *
     * @param description the localized description of this Phone
     * @param locale the locale of the language
     * @param defaultLocale the default locale
     */
    public void setDescription(String description, Locale locale,
        Locale defaultLocale);

    public void setDescriptionCurrentLanguageId(String languageId);

    /**
     * Sets the localized descriptions of this Phone from the map of locales and localized descriptions.
     *
     * @param descriptionMap the locales and localized descriptions of this Phone
     */
    public void setDescriptionMap(Map<Locale, String> descriptionMap);

    /**
     * Sets the localized descriptions of this Phone from the map of locales and localized descriptions, and sets the default locale.
     *
     * @param descriptionMap the locales and localized descriptions of this Phone
     * @param defaultLocale the default locale
     */
    public void setDescriptionMap(Map<Locale, String> descriptionMap,
        Locale defaultLocale);

    /**
     * Returns the release date of this Phone.
     *
     * @return the release date of this Phone
     */
    public Date getReleaseDate();

    /**
     * Sets the release date of this Phone.
     *
     * @param releaseDate the release date of this Phone
     */
    public void setReleaseDate(Date releaseDate);

    /**
     * Returns the price of this Phone.
     *
     * @return the price of this Phone
     */
    public double getPrice();

    /**
     * Sets the price of this Phone.
     *
     * @param price the price of this Phone
     */
    public void setPrice(double price);

    /**
     * Returns the img url of this Phone.
     *
     * @return the img url of this Phone
     */
    @AutoEscape
    public String getImgUrl();

    /**
     * Sets the img url of this Phone.
     *
     * @param imgUrl the img url of this Phone
     */
    public void setImgUrl(String imgUrl);

    @Override
    public boolean isNew();

    @Override
    public void setNew(boolean n);

    @Override
    public boolean isCachedModel();

    @Override
    public void setCachedModel(boolean cachedModel);

    @Override
    public boolean isEscapedModel();

    @Override
    public Serializable getPrimaryKeyObj();

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj);

    @Override
    public ExpandoBridge getExpandoBridge();

    @Override
    public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

    @Override
    public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext);

    public String[] getAvailableLanguageIds();

    public String getDefaultLanguageId();

    public void prepareLocalizedFieldsForImport() throws LocaleException;

    public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
        throws LocaleException;

    @Override
    public Object clone();

    @Override
    public int compareTo(Phone phone);

    @Override
    public int hashCode();

    @Override
    public CacheModel<Phone> toCacheModel();

    @Override
    public Phone toEscapedModel();

    @Override
    public Phone toUnescapedModel();

    @Override
    public String toString();

    @Override
    public String toXmlString();
}
